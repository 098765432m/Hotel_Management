generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  GUEST
}

enum Status_Room {
  AVAILABLE
  OCCUPIED
  MAINTAINANCE
}

enum Status_Booking {
  BOOKED
  CHECK_IN
  PAID
}

model User {
  id                String     @id @unique
  username          String     @unique
  password          String
  full_name          String     
  email             String     @unique
  phone_number       String    @unique
  role              Role       @default(GUEST)
  is_active          Boolean   @default(false)

  //Booking
  booking           Booking[]

  // Only MANAGER and STAFF have this hotel field
  hotel_id          String?
  hotel             Hotel?       @relation(fields: [hotel_id], references: [id])

  // Rating one-to-many
  ratings           Rating[]      @relation("UserRatings")

  //Image relationship one-to-one
  image             Image?        @relation("UserImage")
}

// Rating for Hotel
model Rating {
  id                    String    @id @unique @default(cuid())
  score                 Int       
  comment               String    @db.VarChar(300)

  hotel_id              String
  hotel                 Hotel     @relation("HotelRatings",fields: [hotel_id], references: [id], onDelete: Cascade) // Delete Rating on Hotel has been removed

  guest_id              String
  guest                 User      @relation("UserRatings", fields: [guest_id], references: [id], onDelete: Cascade) // Delete Rating on Guest account has been deleted
}

model Hotel {
  id                    String    @default(cuid()) @id @unique
  name                  String    @unique
  address               Json
  description           String?
  average_rating        Float     @default(0)

  //Room
  rooms                 Room[]

  //Room_Type
  room_types            RoomType[]

  //List of users who work in this hotel
  staffs                User[]

  //Image relationship one-to-many
  images                Image[]       @relation("HotelImages")

  ratings               Rating[]      @relation("HotelRatings")
}

model Room {
  id              String        @default(cuid()) @id @unique
  name            String
  description     String?
  status_room     Status_Room   @default(AVAILABLE)

  //Hotel
  hotel_id        String
  hotel           Hotel         @relation(fields: [hotel_id], references: [id], onDelete: Cascade)

  //Room Type
  room_type_id    String
  room_type       RoomType     @relation(fields: [room_type_id], references: [id])

  //Booking
  bookings        Booking[]

  current_booking_id          String?      @unique
  current_booking             Booking?     @relation("CurrentBooking",fields: [current_booking_id], references: [id])

  @@unique([name, room_type_id])
}

model Booking {
  id                String          @default(cuid()) @id @unique
  check_in_date     DateTime        @default(now())
  check_out_date    DateTime        
  status            Status_Booking  @default(BOOKED)
  createAt          DateTime        @default(now())
  updateAt          DateTime        @default(now()) @updatedAt

  //Room
  room_id           String
  room              Room            @relation(fields: [room_id], references: [id])

  current_room      Room?           @relation("CurrentBooking")

  //User
  user_id           String?
  user              User?           @relation(fields: [user_id], references: [id])

  //Guest with no account
  full_name         String?
  phone_number      String?     
  email             String?     

  //index
  // @@index([check_in_date, check_out_date])
  // @@index([user_id])
  // @@index([status], type: Hash)    
}

model RoomType {
  id                String    @default(cuid()) @id @unique
  name              String    
  price             Int       @default(0)
  
  //Hotel
  hotel_id          String
  hotel             Hotel     @relation(fields: [hotel_id], references: [id], onDelete: Cascade)

  //Room
  rooms             Room[]

  //Image relationship one-to-many
  images            Image[]        @relation("RoomTypeImages")

  @@unique([hotel_id, name])
}

model Bill {
  id                String    @default(cuid()) @id @unique
  total_price       Int
  check_in_date     DateTime
  check_out_date    DateTime
  guest_name        String
  guest_phone       String
  hotel_name        String
  room_type_name    String
  room_name         String
  staff_billed_name String
  date_billed       DateTime
}

model Image {
  id                String        @id @unique @default(cuid())
  public_id         String        @unique
  format            String

  //one-to-one
  user_id           String?        @unique
  user              User?          @relation("UserImage",fields: [user_id], references: [id], onDelete: Restrict) 

  //one-to-many
  hotel_id          String?
  hotel             Hotel?         @relation("HotelImages", fields: [hotel_id], references: [id], onDelete: Restrict)

  //one-to-many
  room_type_id      String?
  room_type         RoomType?     @relation("RoomTypeImages", fields: [room_type_id], references: [id], onDelete: Restrict)
}