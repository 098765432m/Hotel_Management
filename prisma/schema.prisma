generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  GUEST
}

enum Status_Room {
  AVAILABLE
  OCCUPIED
  MAINTAINANCE
}

enum Status_Booking {
  BOOKED
  CHECK_IN
  PAID
}

model User {
  id                String     @id @unique
  username          String     @unique
  password          String
  fullName          String     
  email             String     @unique
  phoneNumber       String     
  role              Role       @default(GUEST)
  isActive          Boolean    @default(false)

  //Booking
  booking           Booking[]

  // Only MANAGER and STAFF have this hotel field
  hotel_id          String?
  hotel             Hotel?       @relation(fields: [hotel_id], references: [id])

  //Image relationship one-to-one
  image             Image?        @relation("UserImage")
}

model Hotel {
  id                    String    @default(cuid()) @id
  name                  String    @unique
  address               Json
  // img_public_id     String?    @default("")
  // img_format        String?    @default("")

  //Room
  rooms                 Room[]  //One to Many

  //Room_Type
  room_types            RoomTypes[]

  //List of users who work in this hotel
  staffs                User[]

  //Image relationship one-to-many
  images                Image[]       @relation("HotelImages")
}

model Room {
  id              String        @default(cuid()) @id
  name            String
  description     String?
  status_room     Status_Room   @default(AVAILABLE)

  //Hotel
  hotel_id        String
  hotel           Hotel         @relation(fields: [hotel_id], references: [id])

  //Room Type
  room_type_id    String
  room_type       RoomTypes     @relation(fields: [room_type_id], references: [id])

  //Booking
  booking         Booking[]
}

model Booking {
  id                String          @default(cuid()) @id
  check_in_date     DateTime        @default(now())
  check_out_date    DateTime        
  status            Status_Booking  @default(BOOKED)

  //Room
  room_id           String
  room              Room            @relation(fields: [room_id], references: [id])

  //User
  user_id           String?
  user              User?           @relation(fields: [user_id], references: [id])

  //Guest with no account
  fullName          String?
  phoneNumber       String?         
  email             String?         
}

model RoomTypes {
  id                String    @default(cuid()) @id
  name              String    
  price             Int       @default(0)
  // img_public_id     String[]    
  // img_format        String[]    
  
  //Hotel
  hotel_id          String
  hotel             Hotel     @relation(fields: [hotel_id], references: [id])

  //Room
  rooms             Room[]

  //Image relationship one-to-many
  images            Image[]        @relation("RoomTypeImages")
}


model Image {
  id                String        @id @unique @default(cuid())
  public_id         String        @unique
  format            String

  //one-to-one
  user_id           String?        @unique
  user              User?          @relation("UserImage",fields: [user_id], references: [id])

  //one-to-many
  hotel_id          String?
  hotel             Hotel?         @relation("HotelImages", fields: [hotel_id], references: [id])

  //one-to-many
  room_type_id      String?
  room_type         RoomTypes?     @relation("RoomTypeImages", fields: [room_type_id], references: [id])
}